/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.14.0' apply false
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

version project.projectVersion

subprojects { subproject ->

    version project.projectVersion
    group project.projectGroupId

    ext {
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    repositories {
        mavenLocal()
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://repo.grails.org/grails/core" }
    }

    apply plugin:"java-library"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    jar {
        manifest {
            attributes('Automatic-Module-Name': "${subproject.group}.${subproject.name}".replaceAll('[^\\w\\.\\$_]', "_"))
            attributes('Implementation-Version': projectVersion)
            attributes('Implementation-Title': 'Monkey')
        }
    }

    tasks.withType(Test) {
        jvmArgs '-Duser.country=US'
        jvmArgs '-Duser.language=en'
        testLogging {
            exceptionFormat = 'full'
        }
        afterSuite {
            System.out.print(".")
            System.out.flush()
        }

        reports.html.enabled = !System.getenv("TRAVIS")
        reports.junitXml.enabled = !System.getenv("TRAVIS")
    }

    dependencies {
        implementation platform("io.micronaut:micronaut-bom:$micronautVersion")

        runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"

        testImplementation "io.micronaut:micronaut-inject-java"
        testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")
        testImplementation('org.mockito:mockito-junit-jupiter:2.24.0')
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
        testAnnotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = 8.10
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')

        // Per submodule
        maxErrors = 1
        maxWarnings = 10

        showViolations = true
    }

    checkstyleTest.enabled = false
}

allprojects {
    apply plugin: 'idea'

    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/java/test')
        }
    }
    apply from: rootProject.file('gradle/license.gradle')
}
